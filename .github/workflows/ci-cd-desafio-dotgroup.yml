name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      aprovar_deploy:
        description: "Digite 'sim' para aplicar o Terraform"
        required: true
        default: "nao"

env:
  DOCKER_IMAGE: marcorassak/desafio_dotgroup
  DOCKERFILE_PATH: docker/Dockerfile

permissions:
  contents: read
  security-events: write

jobs:
  build:
    name: Construir imagem Docker
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - name: Construir imagem Docker (sem push)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ env.DOCKERFILE_PATH }}
          push: false
          load: true
          tags: ${{ env.DOCKER_IMAGE }}:${{ github.sha }}

      - name: Salvar imagem como tar
        run: docker image save ${{ env.DOCKER_IMAGE }}:${{ github.sha }} -o image.tar

      - name: Publicar artefato da imagem
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.tar

  scan:
    name: Verificar vulnerabilidades
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v4

      - name: Baixar artefato da imagem
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Carregar imagem no Docker local
        run: docker load --input image.tar

      - name: Executar Trivy (SARIF)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          format: sarif
          output: trivy-results.sarif
          severity: CRITICAL,HIGH
      - name: Enviar resultados Trivy
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results.sarif
      - name: Executar Trivy (tabela)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          format: table
          severity: CRITICAL,HIGH
          exit-code: 1

  push:
    name: Publicar imagem Docker
    runs-on: ubuntu-latest
    needs: [build, scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v4

      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=raw,value=latest


      - name: Construir e enviar imagem Docker
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ env.DOCKERFILE_PATH }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Mensagem de sucesso
        run: |
          echo "Imagem enviada com sucesso: ${{ steps.meta.outputs.tags }}"

  terraform_plan:
    name: Gerar plano Terraform
    runs-on: ubuntu-latest
    needs: push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v4

      - name: Configurar credenciais AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Preparar Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform init
        working-directory: terraform
        run: terraform init

      - name: Terraform plan
        working-directory: terraform
        run: terraform plan -input=false -var-file=terraform.tfvars -out=tfplan

      - name: Publicar plano Terraform
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: terraform/tfplan

  terraform_apply:
    name: Aplicar Terraform
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.aprovar_deploy == 'sim'
    environment: infraestrutura
    permissions:
      contents: read
    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v4

      - name: Configurar credenciais AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Preparar Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform init
        working-directory: terraform
        run: terraform init

      - name: Terraform plan (confirmação)
        working-directory: terraform
        run: terraform plan -input=false -var-file=terraform.tfvars

      - name: Terraform apply
        working-directory: terraform
        run: terraform apply -input=false -auto-approve -var-file=terraform.tfvars
